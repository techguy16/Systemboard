#!/bin/bash

os_type() {
    if [[ "$(uname -s)" == "Linux" ]]; then echo "Linux"
    else uname -s 
    fi
}


cpuinfo_read() {
    read_data="$(cat /proc/cpuinfo | grep "$*" | head -n 1 | awk -F': ' '{print $2}')"
    echo "$read_data"
}

get_cpu_architecture() {
    if [[ $(uname -p) != "unknown" ]]; then
        echo "$(uname -p)"
    else
        echo "$(uname -m)"
    fi
}

get_cpu_name() {
    cpu_name=$(cpuinfo_read "model name")
    if [[ "$(echo $cpu_name | awk '{print $2}')" == "Gen" ]]; then
        cpu_name=$(echo $cpu_name | sed "s/$(echo $cpu_name | awk '{print $1, $2}') //")
    fi
    echo "$cpu_name"
}

get_cpu_speed() {
    if [[ "$(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F': ' '{print $2}')" == *"Intel"* ]]; then
        echo "$(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F': ' '{print $2}' | awk -F'@ ' '{print $2}')"
    else
        awk -F: '/cpu MHz/ {printf "%.2f GHz\n", int($2/100)/10}' /proc/cpuinfo | head -n1
    fi
}

get_cpu_cores() {
    echo "$(( $(cat /proc/cpuinfo | grep processor | tail -n1 | awk -F": " '{print $2}') + 1 ))"
}

get_cpu_vtx() {
    if [[ "$(cat /proc/cpuinfo | grep vmx | head -n1)" == *"vmx"* ]]; then
        if [ -e "/dev/kvm" ]; then
            echo "Supported, enabled"
        else
            echo "Supported, not enabled"
        fi
    else
        echo "Not supported/enabled"
    fi
}

get_gpu_brand() {
    if command -v nvidia-smi &> /dev/null; then
        echo "NVIDIA"
    else
        case $(cat /sys/class/drm/render*/device/vendor) in
            0x10de) echo "NVIDIA";;
            0x1002) echo "AMD";;
            0x8086) echo "Intel";;
            *) echo "Unknown";;
        esac
    fi
}
get_gpu_name() {
    gpu_name=$(lspci | grep -i 'vga\|3d\|2d' | awk -F ': ' '{print $2}')
    if [[ "$gpu_name" == "NVIDIA"* ]]; then
        gpu_name_old="$gpu_name"
        gpu_code="$(nvidia-smi --query-gpu=gpu_name --format=csv | tail -n1)"
        gpu_name="$gpu_code"
    elif [[ "$gpu_name" == *"[Iris Xe Graphics]"* ]]; then
        gpu_name="Iris Xe Graphics ($(echo $gpu_name | awk '{print $3}'))"
    fi
    echo "$gpu_name"
}

get_gpu_memory() {
    gpu_name=$(lspci | grep -i 'vga\|3d\|2d' | awk -F ': ' '{print $2}')
    if command -v nvidia-smi &> /dev/null; then
        nvidia-smi --query-gpu=memory.total,memory.used,memory.free --format=csv | tail -n1 | awk -F',' '{print $1}'
    elif [ -d /sys/class/drm/card0/device ] && [ -e /sys/class/drm/card0/device/mem_info_vram_total ]; then
        total=$(cat /sys/class/drm/card0/device/mem_info_vram_total)
        echo "$((total/1024/1024))"
    else 
        attempt=$(lspci -v -s "$(lspci | grep -i 'vga\|3d\|2d' | awk '{print $1}')" \
            | grep Memory | tail -n2 | head -n1 | sed 's/\[//' | sed 's/\]//' \
            | awk -F'size=' '{print $2}' | sed 's/M/ MiB/' | sed 's/G/ GiB/')
        if [[ "$attempt" == "" ]]; then
            echo "Unknown"
        else
            echo "$attempt"
        fi
    fi
}

get_total_memory() {
    echo "$(($(cat /proc/meminfo | grep MemTotal | awk '{print $2}') / 1024)) MiB"
}

get_memory_simple() {
    echo "$(($(cat /proc/meminfo | grep MemTotal | awk '{print $2}') / 1000)) MB"
}

get_product() {
    echo "$(cat /sys/devices/virtual/dmi/id/sys_vendor) $(cat /sys/devices/virtual/dmi/id/product_name)"
}

get_motherboard_brand() {
    cat /sys/class/dmi/id/board_vendor
}

get_motherboard_model() {
    cat /sys/class/dmi/id/board_name
}

firmware_type() {
    [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS
}

get_bios_vendor() {
    cat /sys/devices/virtual/dmi/id/bios_vendor
}

get_bios_version() {
    cat /sys/devices/virtual/dmi/id/bios_version
}

get_bios_date() {
    cat /sys/devices/virtual/dmi/id/bios_date
}

get_distro_prettyname() {
    cat /etc/*-release | grep PRETTY_NAME=\" | head -n1 | awk -F'"' '{print $2}'
}

get_distro_name() {
    cat /etc/*-release | grep NAME=\" | head -n1 | awk -F'"' '{print $2}'
}

get_distro_version() {
    cat /etc/*-release | grep VERSION=\" | head -n1 | awk -F'"' '{print $2}'
}

get_kernel_name() {
    uname -s
}

get_kernel_version() {
    uname -r
}

get_network_name() {
    uname -n
}

get_windowing_system() {
    if [[ "$XDG_SESSION_TYPE" == "x11" ]]; then
        echo "X11"
    elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
        echo "Wayland"
    else
        echo "Unknown"
    fi
}

get_desktop_environment() {
    if [[ "$DESKTOP_SESSION" == "gnome"* ]]; then
        echo "GNOME"
    elif [[ "$XDG_CURRENT_DESKTOP" == "pop:GNOME" ]];then
    	echo "Pop! COSMIC"
    elif [[ "$XDG_CURRENT_DESKTOP" != "" ]]; then
        echo "$XDG_CURRENT_DESKTOP"
    elif [[ "$DESKTOP_SESSION" != "" ]]; then
        echo "$DESKTOP_SESSION"
    else
        echo "Unknown"
    fi
}

get_icon() {
    if [[ "$(cat /etc/os-release | grep -e "^NAME" | sed "s/\"//g" | awk -F'=' '{print $2}')" == "Debian"* ]]; then
        echo "emblem-debian"
    else
        hostnamectl icon-name
    fi
}

systemboard_title_text() {
    echo "<big><b>$USER@$(hostname)</b></big>\n$(get_product)"
}
